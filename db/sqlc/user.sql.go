// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, hashed_password, full_name,email) VALUES ($1, $2, $3, $4) RETURNING username, hashed_password, full_name, email, password_change_at, created_at
`

type CreateUserParams struct {
	Username       string
	HashedPassword string
	FullName       string
	Email          string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangeAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one
SELECT username, hashed_password, full_name, email, password_change_at, created_at FROM users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsers, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangeAt,
		&i.CreatedAt,
	)
	return i, err
}
